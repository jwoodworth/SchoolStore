@model SchoolStore.Models.ProductConfigurationModel
@{
    ViewData["Title"] = "Index";
    var states = (new string[] { "", "Alabama", "Alaska", "Arkansas" }).Select(x => new SelectListItem { Text = x, Value = x });
    var colors = (new string[] { "", "Blue", "Red", "Gray", "Green", "White" }).Select(x => new SelectListItem { Text = x, Value = x });
    var sizes = (new string[] { "", "Small", "Medium", "Large", "X-Large", "XX-Large" }).Select(x => new SelectListItem { Text = x, Value = x });


}

@if (!this.ViewContext.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @Html.ValidationSummary(false)
    </div>
}
    <form method="post" @* asp-action="Index" asp-controller="ProductConfigurationController" *@ novalidate>
        @Html.AntiForgeryToken()

        <!-- HTML Helperes in Razor-->
        <!--Razor syntax-->
        <!--Need to add name attribute to all controls-->
        <div class="form-group row">
            <div class="col-sm-2">
                <label asp-for="ProductName">Product</label>
            </div>
            <div class="col-sm-10">
                <input asp-for="ProductName" class="@(ViewData.ModelState.ContainsKey("ProductName") && ViewData.ModelState.FirstOrDefault(x => x.Key == "ProductName").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")" required minlength="3"/>
                <span asp-validation-for="ProductName" class="invalid-feedback">Name must be at least 3 characters</span>
            </div>
        </div>
        
       @*
        <label for="productname01" class="col-sm-2 col-form-label">Product Name</label>
        <div class="col-sm-10">
            <input asp-for="ProductName" class="form-control" min="3" required>
            <span asp-validation-for="ProductName" class="invalid-feedback">Name needs to be 3 characters</span>
        </div>
        *@


        <div class="form-group row dropdown">
            <div class="col-sm-2">
                <label for="productsize" class="col-md-4 col-form-label">Size</label>
            </div>
            <div class="col-sm-10">
                <select asp-for="ProductSize" asp-items="sizes" class="@(ViewData.ModelState.ContainsKey("ProductSize") && ViewData.ModelState.FirstOrDefault(x => x.Key == "ProductSize").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")"></select>
                <span asp-validation-for="ProductSize" class="invalid-feedback"></span>

            </div>
        </div>



        <div class="form-group row dropdown">
            <div class="col-sm-2">
                <label for="productcolor" class="col-md-4 col-form-label">Color</label>
            </div>
            <div class="col-sm-10">
                <select asp-for="ProductColor" asp-items="colors" class="@(ViewData.ModelState.ContainsKey("ProductColor") && ViewData.ModelState.FirstOrDefault(x => x.Key == "ProductColor").Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "form-control is-invalid" : "form-control")"></select>
                <span asp-validation-for="ProductColor" class="invalid-feedback"></span>

                @*
                @Html.DropDownListFor(m => m.ProductColor, ((string[])ViewData["Colors"]).Select(x => new SelectListItem { Text = x, Value = x }), new { @class = "form-control" })
                *@
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-10">
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </form>
@section Scripts{ }


